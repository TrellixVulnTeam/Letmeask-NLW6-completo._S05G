{"ast":null,"code":"var _jsxFileName = \"/home/lucas/lucas/letmeask/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing Information from Google Account,');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n  }, []);\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing Information from Google Account,');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        singInWithGoogle\n      },\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rooms/new\",\n        component: NewRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lucas/lucas/letmeask/src/App.tsx"],"names":["createContext","useState","useEffect","BrowserRouter","Route","Home","NewRoom","auth","firebase","AuthContext","App","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","singInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAAQC,IAAR,EAAcC,QAAd,QAA6B,qBAA7B;;AAaA,OAAO,MAAMC,WAAW,gBAAGT,aAAa,CAAC,EAAD,CAAjC;;AAEP,SAASU,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACf,UAAMW,WAAW,GAAGN,IAAI,CAACO,kBAAL,CAAwBH,IAAI,IAAG;AACjD,UAAIA,IAAJ,EAAU;AACF,cAAM;AAACI,UAAAA,WAAD;AAAcC,UAAAA,QAAd;AAAwBC,UAAAA;AAAxB,YAA+BN,IAArC;;AAEA,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACP;;AACDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AACF,KAbmB,CAApB;AAcD,GAfQ,EAeN,EAfM,CAAT;;AAiBA,iBAAeM,gBAAf,GAAkC;AAChC,UAAMC,QAAQ,GAAG,IAAIf,QAAQ,CAACD,IAAT,CAAciB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACmB,eAAL,CAAqBH,QAArB,CAArB;;AAGQ,QAAGE,MAAM,CAACd,IAAV,EAAgB;AACd,YAAM;AAACI,QAAAA,WAAD;AAAcC,QAAAA,QAAd;AAAwBC,QAAAA;AAAxB,UAA+BQ,MAAM,CAACd,IAA5C;;AAEA,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACN;;AACDN,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AAEL;;AACD,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEL,QAAAA,IAAF;AAAQW,QAAAA;AAAR,OAA7B;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,SAAS,EAAEjB;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAjDQI,G;;KAAAA,G;AAmDT,eAAeA,GAAf","sourcesContent":["import { createContext, useState, useEffect } from 'react'\n\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport {auth, firebase} from './services/firebase';\n\ntype User = {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\ntype AuthContextType = {\n  user: User | undefined;\n  singInWithGoogle:() => Promise<void>;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\nfunction App() {\n  const [user, setUser] = useState<User>();\n\n  useEffect( () => {\n    const unsubscribe = auth.onAuthStateChanged(user =>{\n      if (user) {\n              const {displayName, photoURL, uid} = user\n\n              if (!displayName || !photoURL){\n                throw new Error('Missing Information from Google Account,');\n        }\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    })\n  }, [] )\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    const result = await auth.signInWithPopup(provider);\n\n      \n            if(result.user) {\n              const {displayName, photoURL, uid} = result.user\n\n              if (!displayName || !photoURL){\n                throw new Error('Missing Information from Google Account,');\n         }\n         setUser({\n           id: uid,\n           name: displayName,\n           avatar: photoURL\n         })\n       }\n    \n  }\n  return (\n    <BrowserRouter>\n      <AuthContext.Provider value={{ user, singInWithGoogle }}> \n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/rooms/new\" component={NewRoom} />\n      </AuthContext.Provider>\n    </BrowserRouter>\n  \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}