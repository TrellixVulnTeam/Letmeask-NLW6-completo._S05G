{"ast":null,"code":"var _jsxFileName = \"/home/lucas/lucas/letmeask/src/context/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing Information from Google Account,');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing Information from Google Account,');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      singInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/lucas/lucas/letmeask/src/context/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","singInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,sBAA/B;;AAiBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAGP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAA8D;AAAA;;AACjE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAEFD,EAAAA,SAAS,CAAE,MAAM;AACf,UAAMS,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAG;AACjD,UAAIA,IAAJ,EAAU;AACF,cAAM;AAACI,UAAAA,WAAD;AAAcC,UAAAA,QAAd;AAAwBC,UAAAA;AAAxB,YAA+BN,IAArC;;AAEA,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACP;;AACDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AACF,KAbmB,CAApB;AAcA,WAAO,MAAM;AACXH,MAAAA,WAAW;AACZ,KAFD;AAGD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,iBAAeS,gBAAf,GAAkC;AAChC,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,QAArB,CAArB;;AAGQ,QAAGE,MAAM,CAACd,IAAV,EAAgB;AACd,YAAM;AAACI,QAAAA,WAAD;AAAcC,QAAAA,QAAd;AAAwBC,QAAAA;AAAxB,UAA+BQ,MAAM,CAACd,IAA5C;;AAEA,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACN;;AACDN,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AAEL;;AACC,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,IAAF;AAAQW,MAAAA;AAAR,KAA7B;AAAA,cACKZ,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAhDelB,mB;;KAAAA,mB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\n\ntype User = {\n    id: string;\n    name: string;\n    avatar: string;\n  }\n  \n  type AuthContextType = {\n    user: User | undefined;\n    singInWithGoogle:() => Promise<void>;\n  }\n\ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\n\nexport function AuthContextProvider(props: AuthContextProviderProps) {\n    const [user, setUser] = useState<User>();\n\n  useEffect( () => {\n    const unsubscribe = auth.onAuthStateChanged(user =>{\n      if (user) {\n              const {displayName, photoURL, uid} = user\n\n              if (!displayName || !photoURL){\n                throw new Error('Missing Information from Google Account,');\n        }\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    })\n    return () => {\n      unsubscribe();\n    }\n  }, [] )\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    const result = await auth.signInWithPopup(provider);\n\n      \n            if(result.user) {\n              const {displayName, photoURL, uid} = result.user\n\n              if (!displayName || !photoURL){\n                throw new Error('Missing Information from Google Account,');\n         }\n         setUser({\n           id: uid,\n           name: displayName,\n           avatar: photoURL\n         })\n       }\n    \n  }\n    return(\n        <AuthContext.Provider value={{ user, singInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}